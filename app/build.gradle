apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId 'de.salomax.currencies'
        minSdkVersion 26
        targetSdkVersion 30
        // SemVer
        versionName = '1.5.0'
        versionCode = 10500
        archivesBaseName = "$applicationId-v$versionCode"
    }


    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles [
                    'proguard-rules.pro'
            ]
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ' [DEBUG]'
        }
    }

    flavorDimensions "version"
    productFlavors {
        play {
            dimension "version"
        }
        fdroid {
            dimension "version"
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    // support libs
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.material:material:1.3.0'
    // downloader
    def fuelVersion = '2.3.1'
    implementation "com.github.kittinunf.fuel:fuel:$fuelVersion"
    implementation "com.github.kittinunf.fuel:fuel-android:$fuelVersion"
    implementation "com.github.kittinunf.fuel:fuel-moshi:$fuelVersion"
    def moshiVersion = '1.12.0'
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
    // math
    implementation 'org.mariuszgromada.math:MathParser.org-mXparser:4.4.2'
    // test
    testImplementation 'junit:junit:4.13.2'

    //My Pointzi Dialog library
    implementation project(path: ':custom_dialog')
}

private String getSecret(String key) {
    File secretsFile = rootProject.file("secrets.properties")
    if (secretsFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(secretsFile))
        return props.getProperty(key)
    } else {
        return null
    }
}

// versionCode <-> versionName /////////////////////////////////////////////////////////////////////

/**
 * Checks if versionCode and versionName match.
 * Needed because of F-Droid: both have to be hard-coded and can't be assigned dynamically.
 * So at least check during build for them to match.
 */
task checkVersion doLast {
    int versionCode = android.defaultConfig.versionCode
    int correctVersionCode = generateVersionCode(android.defaultConfig.versionName)
    if (versionCode != correctVersionCode)
        throw new GradleException(
                "versionCode and versionName don't match: " +
                        "versionCode should be $correctVersionCode. Is $versionCode."
        )
}
assemble.dependsOn checkVersion

/**
 * Checks if a fastlane changelog for the current version is present.
 */
task checkFastlaneChangelog doLast {
    int versionCode = android.defaultConfig.versionCode
    File changelogFile = file("$rootDir/fastlane/metadata/android/en-US/changelogs/${versionCode}.txt")
    if (!changelogFile.exists())
        throw new GradleException(
                "Fastlane changelog missing: expecting file '$changelogFile'"
        )
}
build.dependsOn checkFastlaneChangelog

/**
 * Generates a versionCode based on the given semVer String.
 * See e.g. https://proandroiddev.com/keep-salinity-with-your-versioncode-db2089b640b9
 *
 * @param semVer e.g. 1.3.1
 * @return e.g. 10301 (-> 1 03 01)
 */
private static int generateVersionCode(String semVer) {
    return semVer.split('\\.')
            .collect { Integer.parseInt(it) }
            .inject { sum, value -> sum * 100 + value }
}
